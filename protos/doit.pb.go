// Code generated by protoc-gen-go.
// source: doit.proto
// DO NOT EDIT!

/*
Package protos is a generated protocol buffer package.

It is generated from these files:
	doit.proto
	plugin.proto

It has these top-level messages:
	RegisterRequest
	RegisterReply
*/
package protos

import proto "github.com/golang/protobuf/proto"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal

type RegisterRequest struct {
	Name string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
}

func (m *RegisterRequest) Reset()         { *m = RegisterRequest{} }
func (m *RegisterRequest) String() string { return proto.CompactTextString(m) }
func (*RegisterRequest) ProtoMessage()    {}

type RegisterReply struct {
	Address string `protobuf:"bytes,1,opt,name=address" json:"address,omitempty"`
}

func (m *RegisterReply) Reset()         { *m = RegisterReply{} }
func (m *RegisterReply) String() string { return proto.CompactTextString(m) }
func (*RegisterReply) ProtoMessage()    {}

// Client API for Doit service

type DoitClient interface {
	Register(ctx context.Context, in *RegisterRequest, opts ...grpc.CallOption) (*RegisterReply, error)
}

type doitClient struct {
	cc *grpc.ClientConn
}

func NewDoitClient(cc *grpc.ClientConn) DoitClient {
	return &doitClient{cc}
}

func (c *doitClient) Register(ctx context.Context, in *RegisterRequest, opts ...grpc.CallOption) (*RegisterReply, error) {
	out := new(RegisterReply)
	err := grpc.Invoke(ctx, "/protos.Doit/Register", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Doit service

type DoitServer interface {
	Register(context.Context, *RegisterRequest) (*RegisterReply, error)
}

func RegisterDoitServer(s *grpc.Server, srv DoitServer) {
	s.RegisterService(&_Doit_serviceDesc, srv)
}

func _Doit_Register_Handler(srv interface{}, ctx context.Context, codec grpc.Codec, buf []byte) (interface{}, error) {
	in := new(RegisterRequest)
	if err := codec.Unmarshal(buf, in); err != nil {
		return nil, err
	}
	out, err := srv.(DoitServer).Register(ctx, in)
	if err != nil {
		return nil, err
	}
	return out, nil
}

var _Doit_serviceDesc = grpc.ServiceDesc{
	ServiceName: "protos.Doit",
	HandlerType: (*DoitServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Register",
			Handler:    _Doit_Register_Handler,
		},
	},
	Streams: []grpc.StreamDesc{},
}

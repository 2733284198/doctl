// Code generated by protoc-gen-go.
// source: plugin.proto
// DO NOT EDIT!

package protos

import proto "code.google.com/p/goprotobuf/proto"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = math.Inf

type PluginRequest_OptionType int32

const (
	PluginRequest_STRING PluginRequest_OptionType = 0
	PluginRequest_BOOL   PluginRequest_OptionType = 1
	PluginRequest_INT    PluginRequest_OptionType = 2
)

var PluginRequest_OptionType_name = map[int32]string{
	0: "STRING",
	1: "BOOL",
	2: "INT",
}
var PluginRequest_OptionType_value = map[string]int32{
	"STRING": 0,
	"BOOL":   1,
	"INT":    2,
}

func (x PluginRequest_OptionType) Enum() *PluginRequest_OptionType {
	p := new(PluginRequest_OptionType)
	*p = x
	return p
}
func (x PluginRequest_OptionType) String() string {
	return proto.EnumName(PluginRequest_OptionType_name, int32(x))
}
func (x *PluginRequest_OptionType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(PluginRequest_OptionType_value, data, "PluginRequest_OptionType")
	if err != nil {
		return err
	}
	*x = PluginRequest_OptionType(value)
	return nil
}

type PluginReply_OutputType int32

const (
	PluginReply_JSON PluginReply_OutputType = 0
	PluginReply_TEXT PluginReply_OutputType = 1
)

var PluginReply_OutputType_name = map[int32]string{
	0: "JSON",
	1: "TEXT",
}
var PluginReply_OutputType_value = map[string]int32{
	"JSON": 0,
	"TEXT": 1,
}

func (x PluginReply_OutputType) Enum() *PluginReply_OutputType {
	p := new(PluginReply_OutputType)
	*p = x
	return p
}
func (x PluginReply_OutputType) String() string {
	return proto.EnumName(PluginReply_OutputType_name, int32(x))
}
func (x *PluginReply_OutputType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(PluginReply_OutputType_value, data, "PluginReply_OutputType")
	if err != nil {
		return err
	}
	*x = PluginReply_OutputType(value)
	return nil
}

type PluginRequest struct {
	Option           []*PluginRequest_Option `protobuf:"bytes,1,rep,name=option" json:"option,omitempty"`
	XXX_unrecognized []byte                  `json:"-"`
}

func (m *PluginRequest) Reset()         { *m = PluginRequest{} }
func (m *PluginRequest) String() string { return proto.CompactTextString(m) }
func (*PluginRequest) ProtoMessage()    {}

func (m *PluginRequest) GetOption() []*PluginRequest_Option {
	if m != nil {
		return m.Option
	}
	return nil
}

type PluginRequest_Option struct {
	Name             *string                   `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	Value            *string                   `protobuf:"bytes,2,opt,name=value" json:"value,omitempty"`
	Type             *PluginRequest_OptionType `protobuf:"varint,3,opt,name=type,enum=protos.PluginRequest_OptionType" json:"type,omitempty"`
	XXX_unrecognized []byte                    `json:"-"`
}

func (m *PluginRequest_Option) Reset()         { *m = PluginRequest_Option{} }
func (m *PluginRequest_Option) String() string { return proto.CompactTextString(m) }
func (*PluginRequest_Option) ProtoMessage()    {}

func (m *PluginRequest_Option) GetName() string {
	if m != nil && m.Name != nil {
		return *m.Name
	}
	return ""
}

func (m *PluginRequest_Option) GetValue() string {
	if m != nil && m.Value != nil {
		return *m.Value
	}
	return ""
}

func (m *PluginRequest_Option) GetType() PluginRequest_OptionType {
	if m != nil && m.Type != nil {
		return *m.Type
	}
	return PluginRequest_STRING
}

type PluginReply struct {
	Output           *string `protobuf:"bytes,1,opt,name=output" json:"output,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *PluginReply) Reset()         { *m = PluginReply{} }
func (m *PluginReply) String() string { return proto.CompactTextString(m) }
func (*PluginReply) ProtoMessage()    {}

func (m *PluginReply) GetOutput() string {
	if m != nil && m.Output != nil {
		return *m.Output
	}
	return ""
}

func init() {
	proto.RegisterEnum("protos.PluginRequest_OptionType", PluginRequest_OptionType_name, PluginRequest_OptionType_value)
	proto.RegisterEnum("protos.PluginReply_OutputType", PluginReply_OutputType_name, PluginReply_OutputType_value)
}
